{
	"War Starter Pack":
	{
		"scope":"cmake",
		"prefix":"dbstart",
		"body":
		[
			"find_package(TinyOrm 0.36.5 CONFIG REQUIRED)",
			"target_link_libraries(${1:YOUR_LIBRARY} PUBLIC compiler_flags PRIVATE Qt6::Core PRIVATE TinyOrm::TinyOrm",
		]
	}

	"Standart Pch for TinyORM":
	{
		"scope": "cpp",
		"prefix": "dbpch",
		"body":
		[
			"#pragma once",
			"#include <orm/db.hpp>",
			"#include <orm/tiny/model.hpp>",
			"#include <orm/utils/configuration.hpp>",
			"#include <orm/schema.hpp>",
			"#include <orm/schema/blueprint.hpp>",
			"#include \"orm/tiny/model.hpp\"",
			"#include <orm/schema.hpp>",
			"#include <orm/schema/blueprint.hpp>",
		]

	}

	"Create Manager":
	{
		"score": "cpp",
		"prefix": "dbmanager",
		"body":
		[
			"#include <orm/db.hpp>",
			"#include <orm/utils/configuration.hpp>",
			"",
			"",
			"using Orm::DB;",
			"",
			"auto manager = DB::create({",
			"\t{\"${1:NAME_OF_CONNECTION}\", {",
			"\t{\"driver\",          \"${2:CONNECTION_DRIVER(ex.QMYSQL)}\"},",
			"\t{\"host\",            qEnvironmentVariable(\"DB_HOST\", \"127.0.0.1\")},",
			"\t{\"port\",            qEnvironmentVariable(\"DB_PORT\", \"3306\")},",
			"\t{\"database\",        qEnvironmentVariable(\"DB_DATABASE\", \"\")},",
			"\t{\"username\",        qEnvironmentVariable(\"DB_USERNAME\", \"\")},",
			"\t{\"password\",        qEnvironmentVariable(\"DB_PASSWORD\", \"\")},",
			"\t{\"charset\",         qEnvironmentVariable(\"DB_CHARSET\", \"utf8mb4\")},",
			"\t{\"collation\",       qEnvironmentVariable(\"DB_COLLATION\", \"utf8mb4_unicode_520_ci\")},",
			"\t{\"timezone\",        \"+00:00\"},",
			"\t{\"qt_timezone\",     QVariant::fromValue(Qt::LocalTime)},",
			"\t{\"prefix\",          \"\"},",
			"\t{\"prefix_indexes\",  false},",
			"\t{\"strict\",          true},",
			"\t{\"engine\",          \"InnoDB\"},",
			"\t{\"options\",         Orm::Utils::Configuration::${0:mysqlSs}lOptions()},",
			"}},",
			"}, \"${1:NAME_OF_CONNECTION}\");"
		]
	}

	"Create Model":
	{
		"score": "cpp",
		"prefix": "dbmodel",
		"body":
		[
			"using Orm::Schema;",
			"",
			"class ${1:MODEL_NAME} final : public Model<${1:MODEL_NAME}>",
			"{",
				"\tfriend Model;",
				"\tusing Model::Model;",
			"private:",
				"\tQString u_connection {\"mysql\"};",
				"\tQString u_table {\"${2:TABLE_NAME (usually it's lowercase model name with s)}\"};",
				"\tQString u_primaryKey {\"id\"};",
				"",
				"\tbool u_incrementing = true;",
				"\tbool u_timestamps = true;",
				"",
				"\tinline static const QVector<AttributeItem> u_attributes" ,
				"\t{",
					"\t\t{\"test\", \"KYS NOW\"},",
					"\t\t{\"added_on\", QDateTime::currentDateTime()},",
				"\t};",
				"\tinline static QStringList u_fillable {",
					"\t\t\"test\",",
				"\t};",
			"};"
		]
	}

	"Create Model with Relations":
	{
		"score": "cpp",
		"prefix": "dbRmodel",
		"body":
		[
		"class ${3:RELATION_NAME_MODEL};",
		"",
		"class ${1:MODEL_NAME} final : public Model<${1:MODEL_NAME},${3:RELATION_NAME_MODEL}>",
		"{",
			"\tfriend Model;",
			"\tusing Model::Model;",
		"public:",
			"\tstd::unique_ptr<HasOne<${1:MODEL_NAME}, ${3:RELATION_NAME_MODEL}>>",
			"\t${4:RELATION_NAME_MODEL(in lowercase)}()",
			"\t{",
				"\t\treturn hasOne<${3:RELATION_NAME_MODEL}>(/*\"Foreign key in this model\", \"in related model\"*/);",
			"\t}",
		"private:",
			"\tQString u_connection {\"mysql\"};",
			"\tQString u_table {\"${2:TABLE_NAME (usually it's lowercase model name with s)}\"};",
			"\tQString u_primaryKey {\"id\"};",
			"",
			"\tbool u_incrementing = true;",
			"\tbool u_timestamps = true;",
			"",
			"\tinline static const QVector<AttributeItem> u_attributes" ,
			"\t{",
				"\t\t{\"test\", \"KYS NOW\"},",
				"\t\t{\"added_on\", QDateTime::currentDateTime()},",
			"\t};",
			"\tinline static QStringList u_fillable {",
				"\t\t\"test\",",
			"\t};",
			"",
			"\tQHash<QString, RelationVisitor> u_relations {",
				"\t\t{\"${4:RELATION_NAME_MODEL(in lowercase)}\", [](auto &v) { v(&${1:MODEL_NAME}::${4:RELATION_NAME_MODEL(in lowercase)}); }},",
			"\t};",
		"};"
		]
	}

	"Create DB Table":
	{
		"score": "cpp",
		"prefix": "dbtable",
		"body":
		[
			"if (!Schema::hasTable(\"${1:table_names}\"))",
			"{",
				"\tSchema::create(\"${1:table_names}\", [](Orm::SchemaNs::Blueprint &table)",
				"\t{",
				   "\t\ttable.id();",
				   "\t\t// table.foreign(\"id\").references(ID).on(\"foreign_id\");",
				   "\t\ttable.timestamps();", 
				"\t});",
			"}"
		]
	}

	"Fast Employee by login":
	{
		"prefix":"_dbEmpl",
		"body":
		[
			"Employee::create(",
    		"{",
    		    "\t{\"AuthData\", \"${TM_SELECTED_TEXT}\"},",
    		    "\t{\"FIO\", \"Ставропольский Владислав Валерьевич\"},",
    		    "\t{\"PassportData\", \"87 89 $RANDOM\"},",
    		    "\t{\"BirthDay\", QDate::currentDate()},",
    		    "\t{\"PositionID\", 2},",
    		    "\t{\"ContactDataNum\", \"+7 $RANDOM 32 00\"},",
    		    "\t{\"ContactDataEMail\", \"iramonami@gmail.com\"},",
    		    "\t{\"StatusID\", 2},",
    		"});"
		]
	}
}